Ass 1: Fibonacci Series

#include <iostream>
using namespace std;

// Fibonacci without recursion
void fib(int n)
{
    int a = 0;
    int b = 1;
    int c;
    
    cout<<a<<" "<<b<<" ";
    for(int i=2; i<n; i++)
    {
        c = a + b;
        cout<<c<<" ";
        a = b;
        b = c;
    }
}

//fibonacci using recursion
void fib_rec(int n)
{
    static int n1 = 0, n2 = 1, n3;
    if(n>0)
    {
        n3 = n1 + n2;
        n1 = n2;
        n2 = n3;
        cout<<n3<<" ";
        fib_rec(n-1);
    }
}

int main() 
{
    int n = 5;
    
    cout<<"Fibonacci series : ";
    fib(5);
    
    cout<<endl<<"Fibonacci series using recursion : ";
    cout<<0<<" "<<1<<" ";
    fib_rec(3);

    return 0;
}

*********************************
output:
Fibonacci series : 0 1 1 2 3 
Fibonacci series using recursion : 0 1 1 2 3 
************************************

Ass 2:

/******************************************************************************

                              FRACTIONAL KNAPSACK 
              
*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;

struct Item
{
    int val;
    int weight;
    
    Item(int val, int weight)
    {
        this->val = val;
        this->weight = weight;
    }
};

bool cmp(struct Item a, struct Item b)
{
    double r1 = (double)a.val / (double)a.weight;
    double r2 = (double)b.val / (double)b.weight;
    
    return r1>r2;
}

double frac(int W, struct Item arr[], int N)
{
    sort(arr, arr+N, cmp);
    double finalvalue = 0.0;
    
    for(int i=0; i<N; i++)
    {
        if(arr[i].weight <= W)
        {
            W-= arr[i].weight;
            finalvalue+= arr[i].val;
        }
        else
        {
            finalvalue +=arr[i].val*((double)W / (double)arr[i].weight);
            break;
        }
    }
    return finalvalue;
}

int main()
{
    int W = 50;
    Item arr[] = {{60, 10}, {100, 20}, {120, 30}};
    
    int N = sizeof(arr) / sizeof(arr[0]);
    
    cout<<frac(W, arr, N);

    return 0;
}

**************************
OUTPUT:  240

/*****************************

/******************************************************************************

                              N QUEENS PROBLEM USING BACK TRACKING
               
*******************************************************************************/

#include <bits/stdc++.h>
#define N 4
using namespace std;

void printSolution(int board[N][N])
{
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            cout<<board[i][j]<<" ";
        }
        cout<<endl;
    }
}

bool isSafe(int board[N][N], int row, int col)
{
    int i,j;
    for(i =0; i<col; i++)
    {
        if(board[row][i])
            return false;
    }
    for(i=row, j=col; i>=0 && j>=0; i--, j--)
    {
        if(board[i][j])
            return false;
    }
    for(i = row, j=col; j>=0 && i<N; i++, j--)
        if(board[i][j])
            return false;
            
    return true;
}

bool solveNQUtil(int board[N][N], int col)
{
    if(col>=N)
        return true;
        
    for(int i=0; i<N; i++)
    {
        if(isSafe(board, i, col))
        {
            board[i][col] = 1;

            if(solveNQUtil(board, col+1) == true)
                return true;
            
            board[i][col] = 0;
        }
        
    }
    return false;
}

bool solveNQ()
{
    int board[N][N] = {0};
                       
    if(solveNQUtil(board, 0) == false)
    {
        cout<<"Solution does not exist";
        return false;
    }
    printSolution(board);
    return true;
}
int main()
{
    solveNQ();
    return 0;
}


**************************
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

/*****************************

/******************************************************************************

                              QUICK SORT

*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;

int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = low-1;
    
    for(int j= low; j<high; j++)
    {
        if(arr[j] <=pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return (i+1);
}

void quickSort(int arr[], int low, int high)
{
    if(low < high)
    {
        int pi = partition(arr, low, high);
        
        quickSort(arr, low, pi-1);
        quickSort(arr, pi+1, high);
    }
}

void print(int arr[], int size)
{
    for(int i=0; i<size; i++)
        cout<<arr[i]<<" ";
}

int main()
{
    int arr[] = {10, 7, 8, 1, 5, 6, 4, 2};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    quickSort(arr, 0, n-1);
    print(arr, n);

    return 0;
}

***************************
1 2 4 5 6 7 8 10

**************************

/******************************************************************************

                            JOB SEQUENCING USING GREEDY APPROACH
                              
*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;

struct Job
{
    char id;
    int dead;
    int profit;
};

bool cmp(Job a, Job b)
{
    return(a.profit > b.profit);
}
void JobScheduling(Job arr[], int n)
{
    sort(arr, arr+n, cmp);
    
    int result[n];
    bool slot[n];
    
    for(int i=0; i<n; i++)
    {
        slot[i] = false;
    }
    
    for(int i=0; i<n; i++)
    {
        for(int j = min(n, arr[i].dead)-1; j>=0; j--)
        {
            if(slot[j] == false)
            {
                result[j] = i;
                slot[j] = true;
                break;
            }
        }
    }
    for(int i=0; i<n; i++)
    {
        if(slot[i])
            cout<<arr[result[i]].id<<" ";
    }
 
}

int main()
{
    Job arr[] = {{'a', 2, 100},
                 {'b', 1, 19},
                 {'c', 2, 27},
                 {'d', 1, 25},
                 {'e', 3, 15}};
    
    int n = sizeof(arr)/sizeof(arr[0]);
    JobScheduling(arr, n);

    return 0;
}

***************************

OUTPUT: c a e

*************************

/******************************************************************************

                              HUFFMAN ENCODING USING GREEDY APPROACH
 
*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;

struct MinHeapNode
{
    char data;
    int freq;
    
    MinHeapNode *left, *right;
    
    MinHeapNode(char d, int f)
    {
        data = d;
        freq = f;
        left = right = NULL;
    }
};

struct cmp
{
    bool operator()(MinHeapNode *l, MinHeapNode *r)
    {
        return (l->freq > r->freq);
    }
};
void printCodes(struct MinHeapNode *root, string str)
{
    if(!root)
        return;
        
    if(root->data != '$')
        cout<<root->data<<" : "<<str<<endl;
        
    printCodes(root->left, str+"0");
    printCodes(root->right, str+"1");
}

void HuffmanCodes(char data[], int freq[], int size)
{
    struct MinHeapNode *left, *right, *top;
    
    priority_queue<MinHeapNode*, vector<MinHeapNode*>, cmp> minheap;
    
    for(int i=0; i<size; i++)
    {
        minheap.push(new MinHeapNode(data[i], freq[i]));
    }
    
    while(minheap.size() != 1)
    {
        left = minheap.top();
        minheap.pop();
        
        right = minheap.top();
        minheap.pop();
        
        struct MinHeapNode *temp = new MinHeapNode('$', left->freq + right->freq);
        temp->left = left;
        temp->right = right;
        
        minheap.push(temp);
    }
    printCodes(minheap.top(), " ");
}

int main()
{
    char arr[] = {'a', 'b', 'c', 'd', 'e'};
    int freq[] = {10, 5, 2, 14, 15};
    
    int size = 5;
    HuffmanCodes(arr, freq, size);
    
    return 0;
}

*********************
c :  000
b :  001
a :  01
d :  10
e :  11
********************

#include <bits/stdc++.h>
using namespace std;

int max(int a, int b)
{
    return (a>b)?a:b;
}

int K(int W, int val[], int wt[], int n)
{
    if(n == 0 || W==0)
        return 0;
    if(wt[n-1]> W)
    {
        return K(W, val, wt, n-1 );
    }
    else
    {
        return max(val[n-1]+ K(W-wt[n-1], val, wt, n-1), K(W, val, wt, n-1));
    }
}

int main() {
    // Write C++ code here
    std::cout << "Hello world!";
        int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << K(W, val, wt, n);
    return 0;

    return 0;
}

*******************************************************

#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns
// maximum of two integers
int max(int a, int b)
{
    return (a > b) ? a : b;
}
 
// Returns the maximum value that
// can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
    int i, w;
      vector<vector<int>> K(n + 1, vector<int>(W + 1));
 
    // Build table K[][] in bottom up manner
    for(i = 0; i <= n; i++)
    {
        for(w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] +
                                K[i - 1][w - wt[i - 1]],
                                K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }
    return K[n][W];
}